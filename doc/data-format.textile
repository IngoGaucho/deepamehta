* "Topic":#topic
* "Relation":#relation
* "Topic Type":#topic-type
** "Data Field":#data-field
*** "Auto-Completion":#auto-completion
* "Topic Map":#topic-map
* "Footnotes":#footnotes


h1(#topic). Topic

bc. {
    "id": 61,
    "type_uri": "de/deepamehta/core/topictype/Note",
    "label": "DeepaMehta 3",
    "properties": {
        "de/deepamehta/core/property/Title": "DeepaMehta 3",
        "de/deepamehta/core/property/Text":
            "<p>DeepaMehta 3 is a platform for collaboration and knowledge management.</p>
             <p>A complete rewrite of DeepaMehta 2.</p>",
        "de/deepamehta/core/property/DateCreated":  1278980093803,
        "de/deepamehta/core/property/DateModified": 1278980093803
    }
}

|_. Attribute     |_. Meaning                             |_. Format / Possible values                                  |
^.| @id@          | ID of the topic in the DB.            | A number (long).                                            |
^.| @type_uri@    | Relates to the topic's type.          | Matches a topic type's @uri@ attribute.                     |
^.| @label@       | The label used to display the topic.  | A string.                                                   |
^.| @properties@  | The topic's properties.               | An object. The keys matches a data field's @uri@ attribute. |


h1(#relation). Relation

bc. {
    "id": 205,
    "type_id": "TOPICMAP_TOPIC",
    "src_topic_id": 40,
    "dst_topic_id": 61,
    "properties": {
        "visibility": true,
        "x": 583.5069227125496,
        "y": 111.0725995968096
    }
}


h1(#topic-type). Topic Type

Example of a topic type "Note" which consist of 2 data fields, "Title" and "Text".

Use this format for declarative topic type definitions, usually in file "types.json" of your plugin.

bc. {
    uri: "de/deepamehta/core/topictype/Note",
    fields: [
        {
            uri: "de/deepamehta/core/property/Title",
            model: {type: "text"},
            view: {label: "Title"},
            indexing_mode: "FULLTEXT"
        },
        {
            uri: "de/deepamehta/core/property/Text",
            model: {type: "html"},
            view: {label: "Text", editor: "multi line"},
            indexing_mode: "FULLTEXT"
        }
    ],
    view: {label: "Note", icon_src: "/de.deepamehta.3-client/images/pencil.png"},
    implementation: "PlainDocument"
}

Structurally a topic type definition consist of 4 attributes: @uri@, @fields@, @view@, and @implementation@.

|_. Attribute        |_. Meaning                                  |_. Format / Possible values                    |_. mandatory / optional |
^.| @uri@            | A globally unique identifier for the topic type. | By convention: a slash separated path of the form &lt;vendor name>/&lt;project name>/topictype/&lt;type name>[1].
                                                                  <br>
                                                                  In the example above the vendor name is "de/deepamehta", the project name is "core". "topictype" is a literal.
                                                                  <br>
                                                                  Vendor name and project name are lower-case. The Type name is camel-case. Usually the type name is a no-spaces variant of the type label (see @label@ attribute below).
                                                                  <br>
                                                                  The URI must contain no spaces and no special characters. 2 consecutive slashes are prohibited.                                                                                                   | mandatory |
^.| @fields@         | Data field definitions.                    | Array of data fields, see "Data Field".       | mandatory |
^.| @view@           | Hints for rendering topics of this type.   | An object with 3 possible attributes:
                       <br>
                       @label@ - the label used to display the topic type in human-readable form e.g. in a menu (mandatory).
                       <br>
                       @icon_src@ - the icon to render a topic of this type (optional).
                       Usually an absolute path that starts with the symbolic name of the plugin that provides the icon file. If not specified a generic icon (gray dot) is used. The the symbolic name is derived from the Maven group ID and artifact ID of the plugin.
                       <br>
                       @label_field@ _not yet implemented_ - the URI of the data field used to render the topic title (optional).
                       If not specified the first data field is used.                                             | mandatory |
^.| @implementation@ | JavaScipt class that implements the look & feel of topics of this type. | The DM3 core provides only one implementation: @PlainDocument@.
<br>
Further implementations can be provided by DeepaMehta 3 plugins.                                                  | mandatory |

<br><br>
Note: when requesting a topic type via the DeepaMehta REST service 2 additional attributes are returned in the response topic type: @id@, and @type_uri@.

|_. Attribute        |_. Meaning                                  |_. Format / Possible values                          |
^.| @id@             | The topic ID of this topic type in the DB. | A number (long).                                    |
^.| @type_uri@       | The topic type of this topic type.         | Is always "de/deepamehta/core/topictype/TopicType". |


h2(#data-field). Data Field

A data field definition consist of 4 possible attributes: @uri@, @model@, @view@, and @indexing_mode@.

|_. Attribute |_. Meaning                                        |_. Format / Possible values                     |_. mandatory / optional |
^.| @uri@     | A globally unique identifier for the data field. | By convention: a slash separated path of the form &lt;vendor name>/&lt;project name>/property/&lt;property name>[1].
                                                                  <br>
                                                                  In the example above the vendor name is "de/deepamehta", the project name is "core". "property" is a literal.
                                                                  <br>
                                                                  Vendor name and project name are lower-case. The property name is camel-case. Usually the property name is a no-spaces variant of the property label (see @view@ / @label@ attribute below).
                                                                  <br>
                                                                  The URI must contain no spaces and no special characters. 2 consecutive slashes are prohibited.                                                   
                                                                  <br>
                                                                  All data field URIs within a topic type definition must be different. | mandatory |
^.| @model@   | Hints about the field's data model. | An object with the following attributes:
                <br>
                @type@ - the data field type (optional). The DeepaMehta 3 core provides 5 data field types:
                    @text@,     the field holds arbitrary (plain) text.
                    @number@,   the field holds a number.
                    @date@,     the field holds a date.
                    @html@,     the field holds arbitrary styled text.
                    @relation@, the field holds relations to other topics of a certain type.
                    In case of "relation" another attribute must be provided: @related_type_uri@, the URI of the related topic type.
                    <br>
                    If not specified "text" is used.
                    <br>
                    Further data types can be provided by DeepaMehta 3 plugins.                                   | optional |
^.| @view@    | Hints for rendering and editing the field content. | An object with the following attributes:
                <br>
                @label@ - the label used to display the property in human-readable form e.g. on an input field of a form (mandatory).
                <br>
                @editor@ - Controls the rendering of the field in a form (optional). Possible values depend on the "model" (above).
                    *text*     fields: @single line@ or @multi line@. In case of "multi line", another attribute might be provided: @lines@, the number of lines of the edit field (default is 30).
                    *number*   fields: "editor" is ignored.
                    *date*     fields: "editor" is ignored. A datepicker widget is utilized.
                    *html*     fields: "editor" is ignored. A WYSIWYG editor widget is utilitzed. "multi line" is asserted. @lines@ can be used to set the (vertical) size of the editor area.
                    *relation* fields: "editor" must be set to @checkboxes@. More possible values in the future.
                                                                                | mandatory |
^.| @indexing_mode@ | Controls how the data field's values are indexed. | @OFF@ (default)
                                                                          @KEY@
                                                                          @FULLTEXT@
                                                                          @FULLTEXT_KEY@                          | optional |


h3(#auto-completion). Auto-Completion

_not yet implemented_

Data fields feature auto-completion by declaration. To activate auto-completion add the @autocomplete_indexes@ and @autocomplete_style@ attributes to the data field's *view* component.
Note: auto-completion is only supported for *single line* text fields

Example:

bc. {
    "id": ...,
    "model": ...,
    "view": {
        "editor": "single line",
        "autocomplete_indexes": ["dm3-contacts", "dm3-workspaces"],
        "autocomplete_style": "item list"},
    "content": ...
},

|_. Attribute                 |_. Meaning                                    |_. Format / Possible values |_. mandatory / optional |
^.| @autocomplete_indexes@    | The Lucene fulltext indexes to be searched.  | An array of fulltext index function names.
                                <br>
                                Note: fulltext index functions are provided by DeepaMehta 3 plugins. The "DM3 Contacts" plugin e.g. provides the fulltext index function "dm3-contacts". | To activate auto-completion this attribute is mandatory. |
^.| @autocomplete_style@      | Controls how the selected suggestion is inserted into the data field.
                                    | 2 possible values:
                                      <br>
                                      @default@ - The selected suggestion replaces the field's content.
                                      <br>
                                      @item list@ - The selected suggestion is appended to the field's content (using a comma as separator) | optional |


h1(#topic-map). Topic Map

bc. {
    "topics": [
        {
            "id": 67,
            "type_uri": "de/deepamehta/core/topictype/SearchResult",
            "label": "Richter",
            "properties": {
                "de/deepamehta/core/property/DateModified": 1278987883338
            },
            "visualization": {
              "visibility": true,
              "x": 230.2720206072554, "y": 397.7343209804967
            },
            "ref_id": 240
        },
        {
            "id": 42,
            "type_uri": "de/deepamehta/core/topictype/Note",
            "label": "Jörg Richter",
            "properties": {
                "de/deepamehta/core/property/DateModified": 1278736576165
            },
            "visualization": {
                "visibility": true,
                "x": 436.61296997382306, "y": 314.2628641165793
            },
            "ref_id": 243
        },
        {
            "id": 61,
            "type_uri": "de/deepamehta/core/topictype/Note",
            "label": "DeepaMehta 3",
            "properties": {
                "de/deepamehta/core/property/DateModified": 1278980093803
            },
            "visualization": {
                "visibility": true,
                "x": 501.99434025678784, "y": 511.70696080848575
            },
            "ref_id": 246
        }
    ],
    "relations":[
        {
            "id": 238,
            "type_id": "SEARCH_RESULT",
            "src_topic_id": 67, "dst_topic_id": 42,
            "properties": {},
            "ref_id": 68
        },
        {
            "id": 206,
            "type_id": "RELATION",
            "src_topic_id": 42, "dst_topic_id": 61,
            "properties": {},
            "ref_id": 69
        }
    ]
}


h1(#footnotes). Footnotes

fn1. Formally this format actually isn't an URI, e.g. a scheme is missing. From an URI the @uri@ attribute here just inherits the notion of a "globally unique identifier". The @uri@ attribute should be renamed.

