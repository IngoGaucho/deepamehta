* "Topic":#topic
* "Relation":#relation
* "Topic Type":#topic-type
** "Data Field":#data-field
*** "Indexing":#indexing
*** "Auto-Completion":#auto-completion
* "Topic Map":#topic-map
* "Footnotes":#footnotes


h1(#topic). Topic

bc. {
    "id": 61,
    "type_uri": "de/deepamehta/core/topictype/Note",
    "label": "DeepaMehta 3",
    "properties": {
        "de/deepamehta/core/property/Title": "DeepaMehta 3",
        "de/deepamehta/core/property/Text":
            "<p>DeepaMehta 3 is a platform for collaboration and knowledge management.</p>
             <p>A complete rewrite of DeepaMehta 2.</p>",
        "de/deepamehta/core/property/DateCreated":  1278980093803,
        "de/deepamehta/core/property/DateModified": 1278980093803
    }
}

|_. Attribute           |_. Meaning         |_. Format / Possible values |
^.| @id@
  | ID of the topic in the DB.
  | A number (long). |
^.| @type_uri@
  | The topic's type.
  | The topic type's URI (see "Topic Type":#topic-type). |
^.| @label@
  | The label used when displaying the topic, e.g. on the canvas.
  | A string. |
^.| @properties@
  | The topic's properties.
  | An object.
    The keys are the URIs of the corresponding data fiels (see "Data Field":#data-field). |


h1(#relation). Relation

bc. {
    "id": 205,
    "type_id": "TOPICMAP_TOPIC",
    "src_topic_id": 40,
    "dst_topic_id": 61,
    "properties": {
        "visibility": true,
        "x": 583.5069227125496,
        "y": 111.0725995968096
    }
}


h1(#topic-type). Topic Type

Use the following format when declaring topic types. Topic type declarations are usually made in the plugin's "types.json" file (see [[Plugin Development Guide]]).

Example of a topic type "Note" with 4 data fields:

bc. {
    label: "Note",
    uri: "de/deepamehta/core/topictype/Note",
    icon_src: "/de.deepamehta.3-client/images/pencil.png",
    js_renderer_class: "PlainDocument",
    fields: [
        {
            label: "Title",
            uri: "de/deepamehta/core/property/Title",
            data_type: "text",
            editable: true,
            editor: "single line",
            js_renderer_class: "TextFieldRenderer",
            indexing_mode: "FULLTEXT"
        },
        {
            label: "Text",
            uri: "de/deepamehta/core/property/Text",
            data_type: "html",
            editable: true,
            js_renderer_class: "HTMLFieldRenderer",
            indexing_mode: "FULLTEXT"
        },
        {
            label: "Date Modified",
            uri: "de/deepamehta/core/property/DateModified",
            data_type: "number",
            editable: false,
            js_renderer_class: "NumberFieldRenderer",
            indexing_mode: "FULLTEXT_KEY"
        },
        {
            label: "Workspaces",
            uri: "de/deepamehta/core/property/Workspaces",
            data_type: "reference",
            ref_topic_type_uri: "de/deepamehta/core/topictype/Workspace",
            editable: true,
            editor: "checkboxes",
            js_renderer_class: "ReferenceFieldRenderer",
            indexing_mode: "OFF"
        }
    ]
}

A topic type definition consist of the @label@, @uri@, @icon_src@ (optional), @topic_label_field_uri@ (optional), @js_renderer_class@ attributes and the @fields@ array.

|_. Attribute           |_. Meaning             |_. Format / Possible values            |_. Mandatory / Optional |
^.| @label@
  | The label used when displaying the topic type, e.g. in a menu.
  | A string.
  | Mandatory. |
^.| @uri@
  | A globally unique identifier for the topic type.
  | By convention: a slash separated path of the form &lt;vendor name>/&lt;project name>/topictype/&lt;type name>[1].
    <br>
    In the example above the vendor name is "de/deepamehta", the project name is "core". "topictype" is a literal.
    <br>
    Vendor name and project name are lower-case. The Type name is camel-case. Usually the type name is a no-spaces variant of the type label (see @label@ attribute).
    <br>
    The URI must contain no spaces and no special characters. 2 consecutive slashes are prohibited.
  | Mandatory. |
^.| @icon_src@
  | The icon used when displaying a topic of this type, e.g. on the canvas.
  | Usually an absolute path that starts with the symbolic name of the plugin that provides the icon file. If not specified a generic icon (gray dot) is used. The symbolic name is derived from the Maven group ID and artifact ID of the plugin.
  | Optional. |
^.| @topic_label_field_uri@
  | The data field whose value is used when displaying a topic of this type, e.g. on the canvas.
  | The data field's URI (default is the topic type's first data field).
  | Optional. |
^.| @js_renderer_class@
  | The detail panel renderer.
    <br>
    The JavaScript class used by the DeepaMehta 3 client to render the detail panel.
  | The only detail panel renderer provided by the DeepaMehta 3 core is @PlainDocument@.
    <br>
    Further detail panel renderers can be provided by DeepaMehta 3 plugins.
  | Mandatory |
^.| @fields@
  | Data field definitions.
  | Array of data fields (see "Data Field":#data-field below).
  | Mandatory |

<br><br>
*Note:* when a topic type is requested via the DeepaMehta [[REST API]]#get-topic-type-by-id 2 additional attributes are returned in the response topic type: @id@, and @type_uri@.

|_. Attribute      |_. Meaning                                  |_. Format / Possible values                          |
^.| @id@           | The topic ID of this topic type in the DB. | A number (long).                                    |
^.| @type_uri@     | The topic type of this topic type.         | Is always @de/deepamehta/core/topictype/TopicType@. |


h2(#data-field). Data Field

|_. Attribute           |_. Meaning             |_. Format / Possible values            |_. Mandatory / Optional |
^.| @label@
  | The label used when displaying the data field, e.g. in a form.
  | A string.
  | Mandatory. |
^.| @uri@
  | A globally unique identifier for the data field.
  | By convention: a slash separated path of the form &lt;vendor name>/&lt;project name>/property/&lt;property name>[1].
    <br>
    In the example above the vendor name is "de/deepamehta", the project name is "core". "property" is a literal.
    <br>
    Vendor name and project name are lower-case. The property name is camel-case. Usually the property name is a no-spaces variant of the property label (see @view@ / @label@ attribute below).
    <br>
    The URI must contain no spaces and no special characters. 2 consecutive slashes are prohibited.                                                   
    <br>
    All data field URIs within a topic type definition must be different.
  | Mandatory. |
^.| @data_type@
  | The data field's type.
  | The DeepaMehta 3 core provides 5 data types:
        @text@,      the field holds arbitrary text (default).
        @number@,    the field holds a number.
        @date@,      the field holds a date.
        @html@,      the field holds arbitrary styled text.
        @reference@, the field holds references to other topics of a certain type. The referenced topic type is specified by the *ref_topic_type_uri* attribute.
    <br>
    Further data types can be provided by DeepaMehta 3 plugins.
  | Optional. |
^.| @ref_topic_type_uri@
  | The referenced topic type.
    <br>
    Applicable only to data fields of type *reference*.
  | A topic type URI (see "Topic Type":#topic-type above).
  | Mandatory for data fields of type *reference*. |
^.| @editable@
  | Is the data field's value editable by the user (on form pages)?
  | @true@ (default)
    @false@
  | Optional. |
^.| @viewable@
  | Is the data field's value visible to the user (on info pages)?
  | @true@ (default)
    @false@
  | Optional. |
^.| @editor@
  | Customizes the rendering of the data field in a form.
    <br>
    Applicable only to data fields of type *text* or *reference*.
  | For *text* fields: @single line@ (default) or @multi line@. In case of "multi line" another attribute may be provided: *lines*.
    <br>
    For *reference* fields: @checkboxes@. More possible values in the future.
  | Optional. |
^.| @lines@
  | The vertical size of text input fields.
    <br>
    Applicable only to *html* or multi-line *text* data fields.
  | A number (default is @30@ lines).
  | Optional. |
^.| @js_renderer_class@
  | The data field renderer.
    <br>
    The JavaScript class used by the DeepaMehta 3 client to render the data field.
  | The default renderers for the 5 core data types are:
    @TextFieldRenderer@
    @NumberFieldRenderer@
    @DateFieldRenderer@
    @HTMLFieldRenderer@
    @ReferenceFieldRenderer@
    <br>
    For *text* and *html* data fields specialized renderers are available:
    @TitleRenderer@    (big font, no field label)
    @BodyTextRenderer@ (no field label)
    <br>
    Further data field renderers can be provided by DeepaMehta 3 plugins.
  | Optional. |
^.| @indexing_mode@
  | Controls how the data field's value is indexed.
  | @OFF@ (default)
    @KEY@
    @FULLTEXT@
    @FULLTEXT_KEY@
  | Optional. |


h3(#indexing). Indexing

The data field's indexing mode controls how the data field's value is indexed.

|_. Indexing mode   |_. What is indexed / When to use / Query possibilities   |
^.| @OFF@
  | The property value is not indexed.
    <br>
    Use this mode for properties which are not needed in queries. |
^.| @KEY@
  | The exact property value is indexed under the property's key (the data field URI).
    <br>
    Use this mode if you want retrieve topics by property value.
    <br>
    Topics indexed this way can be retrieved by the "getTopic" and "getTopics" core service calls:
    @Topic getTopic(String key, Object value)@ (suitable for retrieving an unique topic)
    @List<Topic> getTopics(String key, Object value)@
    <br>
    Example: @getTopic("de/deepamehta/core/property/PluginID", "de.deepamehta.3-time")@ finds the topic with a the value "de.deepamehta.3-time" in its "PluginID" field. |
^.| @FULLTEXT@
  | The property value is tokenized and each token is indexed under no particular key.
    <br>
    Use this mode if you want fulltext index a topic. E.g. when you want find an article containg the word "summer" regardless weather it appears in the "heading" field or in the "body text" field.
    <br>
    Topics indexed this way can be retrieved by the "searchTopics" core service call:
    @List searchTopics(String searchTerm, String fieldUri, boolean wholeWord)@
    <br>
    Example: @searchTopics("summer", null, false)@ finds all topics which have "summer" somewhere in _any_ field that is indexed with FULLTEXT mode. The search term is case-insenstitive. Setting @wholeWord@ to false, will also find "summertime". (The second parameter is always null.)
    <br>
    The @searchTerm@ parameter features the "Lucene query language":http://lucene.apache.org/java/2_9_3/queryparsersyntax.html. |
^.| @FULLTEXT_KEY@
  | The property value is tokenized and each token is indexed under the property's key (the data field URI).
    <br>
    Topics indexed this way can be retrieved by the "searchTopics" core service call:
    @List searchTopics(String searchTerm, String fieldUri, boolean wholeWord)@
    <br>
    The @searchTerm@ parameter features the "Lucene query language":http://lucene.apache.org/java/2_9_3/queryparsersyntax.html.
    <br>
    Use this mode if you want apply the Lucene query language to a particular field. E.g. the DeepaMehta 3 Time plugin indexes the "Date Modified" field this way in order to enable range queries.
    <br>
    Example: @searchTopics("[1280096677367 TO 1280701477367]", "de/deepamehta/core/property/DateModified", true)@ finds all topics with a modification date within the given range. |


h3(#auto-completion). Auto-Completion

_not yet implemented_

Data fields feature auto-completion by declaration. To activate auto-completion add the @autocomplete_indexes@ and @autocomplete_style@ attributes to the data field definition.
Note: auto-completion is supported only for *single line* text fields

Example:

bc. {
    uri: ...,
    data_type: "text",
    editor: "single line",
    autocomplete_indexes: ["dm3-contacts", "dm3-workspaces"],
    autocomplete_style: "item list"
},

|_. Attribute                 |_. Meaning               |_. Format / Possible values    |_. Mandatory / Optional |
^.| @autocomplete_indexes@
  | The Lucene fulltext indexes to be searched.
  | An array of fulltext index function names.
    <br>
    Note: fulltext index functions are provided by DeepaMehta 3 plugins. The "DM3 Contacts" plugin e.g. provides the fulltext index function "dm3-contacts".
  | To activate auto-completion this attribute is mandatory. |
^.| @autocomplete_style@
  | Controls how the selected suggestion is inserted into the data field.
  | 2 possible values:
    <br>
    @default@ - The selected suggestion replaces the field's content.
    <br>
    @item list@ - The selected suggestion is appended to the field's content (using a comma as separator)
  | Optional. |


h1(#topic-map). Topic Map

When a topic map is requested via the DeepaMehta [[REST API]]#get-topic-map-by-id the response looks like this:

bc. {
    "topics": [
        {
            "id": 67,
            "type_uri": "de/deepamehta/core/topictype/SearchResult",
            "label": "Richter",
            "properties": {
                "de/deepamehta/core/property/DateModified": 1278987883338
            },
            "visualization": {
              "x": 230.2720206072554, "y": 397.7343209804967,
              "visibility": true
            },
            "ref_id": 240
        },
        {
            "id": 42,
            "type_uri": "de/deepamehta/core/topictype/Note",
            "label": "Jörg Richter",
            "properties": {
                "de/deepamehta/core/property/DateModified": 1278736576165
            },
            "visualization": {
                "x": 436.61296997382306, "y": 314.2628641165793,
                "visibility": true
            },
            "ref_id": 243
        },
        {
            "id": 61,
            "type_uri": "de/deepamehta/core/topictype/Note",
            "label": "DeepaMehta 3",
            "properties": {
                "de/deepamehta/core/property/DateModified": 1278980093803
            },
            "visualization": {
                "x": 501.99434025678784, "y": 511.70696080848575,
                "visibility": true
            },
            "ref_id": 246
        }
    ],
    "relations":[
        {
            "id": 238,
            "type_id": "SEARCH_RESULT",
            "src_topic_id": 67, "dst_topic_id": 42,
            "properties": {},
            "ref_id": 68
        },
        {
            "id": 206,
            "type_id": "RELATION",
            "src_topic_id": 42, "dst_topic_id": 61,
            "properties": {},
            "ref_id": 69
        }
    ]
}

A topic map consist of an array of @topics@ and an array of @relations@. The format of a "Topic":#topic resp. "Relation":#relation is basically as described above, with 2 additions:

1. A topic has a @visualization@ object with 3 attributes:

|_. Attribute       |_. Meaning                                         |
^.| @x@, @y@        | Coordinates of the topic within the topic map.    |
^.| @visibility@    | Is the topic visible (@true@) or invisible (@false@) in the topic map?
                      Setting a topic to invisible allows the topic to keep its coordinates within the topic map.                                                              |

2. A topic and a relation have an additional @ref_id@ attribute which is needed when updating the topic resp. relation references (e.g. when moving a topic on the topic map or removing a relation from the topic map).


h1(#footnotes). Footnotes

fn1. Formally this format actually isn't an URI, e.g. a scheme is missing. From an URI the @uri@ attribute here just inherits the notion of a "globally unique identifier". The @uri@ attribute should be renamed.
