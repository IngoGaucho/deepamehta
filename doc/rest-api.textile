
The DeepaMehta application service is accessible via a REST API.

* "Topics":#topics
** "Get topic by ID":#get-topic-by-id
** "Get related topics":#get-related-topics
** "Get topics by type":#get-topics-by-type
** "Search topics":#search-topics
** "Create topic":#create-topic
** "Update topic":#update-topic
** "Delete topic":#delete-topic
* "Relations":#relations
** "Get relation by topics":#get-relation-by-topics
** "Create relation":#create-relation
** "Update relation":#update-relation
** "Delete relation":#delete-relation
* "Topic Types":#topic-types
** "Get topic type IDs":#get-topic-type-ids
** "Get topic type by ID":#get-topic-type-by-id
** "Create topic type":#create-topic-type
** "Add data field":#add-data-field
** "Update data field":#update-data-field
** "Set data field order":#set-data-field-order
** "Remove data field":#remove-data-field
* "Topic Maps":#topic-maps
** "Get topic map by ID":#get-topic-map-by-id
** "Add topic to topic map":#add-topic-to-topic-map
** "Add relation to topic map":#add-relation-to-topic-map
** "Remove topic from topic map":#remove-topic-from-topic-map
** "Remove relation from topic map":#remove-relation-from-topic-map
* "Plugins":#plugins
** "Get installed plugins":#get-installed-plugins


h1(#topics). Topics

h2(#get-topic-by-id). Get topic by ID

h3. Request

bc. GET /core/topic/61

h3. Response

The response is the requested topic:

bc. {
    "id": 61,
    "type_uri": "de/deepamehta/core/topictype/Note",
    "label": "DeepaMehta 3",
    "properties": {
        "de/deepamehta/core/property/Title": "DeepaMehta 3",
        "de/deepamehta/core/property/Text":
            "<p>DeepaMehta 3 is a platform for collaboration and knowledge management.</p>
             <p>A complete rewrite of DeepaMehta 2.</p>",
        "de/deepamehta/core/property/DateCreated":  1278980093803,
        "de/deepamehta/core/property/DateModified": 1278980093803
    }
}

For details about the data format see [[Data Format]]#topic.

If the topic doesn't exist an error 500 ("Topic can't be retrieved") is returned.

h2(#get-related-topics). Get related topics

h3. Request

bc. GET /core/topic/61/related_topics?include_topic_types=de/deepamehta/core/topictype/Note&
                                  include_rel_types=&
                                  exclude_rel_types=SEARCH_RESULT;OUTGOING

|_. Parameter   |_. Meaning       |_. Format / Possible values    |_. Mandatory / Optional |
^.| @include_topic_types@
  | Topic type include filter.
    <br>
    Include only topics of certain types in the result.
  | One or more topic type URIs.
    <br>
    To specify more than one topic type URI, use several @include_topic_types@ parameters.
  | Optional.
    <br>
    If not specified the result is not filtered by topic type.                             |
^.| @include_rel_types@
  | Relation type include filter.
    <br>
    Include only topics in the result which are related via relations of certain types and directions.
  | One or more relation specification of the form @<relation type>[;<direction>]@.
    <br>
    Direction is optional and, when given, is eiter @INCOMING@ or @OUTGOING@. The direction is from the perspective of the related topic.
    <br>
    To make more than one relation specification, use several @include_rel_types@ parameters.
  | Optional.
    <br>
    If not specified the result is not filtered by relation type.                          |
^.| @exclude_rel_types@
  | Relation type exclude filter.
    <br>
    Excludes topics from the result which are related via relations of certain types and directions.
  | One or more relation specification of the form @<relation type>[;<direction>]@.
    <br>
    Direction is optional and, when given, is eiter @INCOMING@ or @OUTGOING@. The direction is from the perspective of the related topic.
    <br>
    To make more than one relation specification, use several @exclude_rel_types@ parameters.
  | Optional.
    <br>
    If not specified the result is not filtered by relation type.                          |

*Note:* You can't use the @include_rel_types@ and @exclude_rel_types@ filters at the same time. (Whereas you can use a topic type filter and a relation type filter at the same time.)

h3. Response

The response is an array of topics, possibly empty.
For details about the topic's data format see [[Data Format]]#topic.

bc. [
        {
            "id": 3,
            "type_uri": "de/deepamehta/core/topictype/TopicType",
            "label": "Note",
            "properties": {
                "de/deepamehta/core/property/DateModified": null
            }
        },
        {
            "id": 39,
            "type_uri": "de/deepamehta/core/topictype/Workspace",
            "label": "Default",
            "properties": {
                "de/deepamehta/core/property/DateModified": 1278736430568
            }
        },
        {
            "id": 42,
            "type_uri": "de/deepamehta/core/topictype/Note",
            "label": "Jörg Richter",
            "properties": {
                "de/deepamehta/core/property/DateModified": 1278736576165
            }
        },
        {
            "id": 56,
            "type_uri": "de/deepamehta/core/topictype/Topicmap",
            "label": "My Topicmap",
            "properties": {
                "de/deepamehta/core/property/DateModified": 1278987701199
            }
        }
    ]

*Note:* The response doesn't contain all of the topic's properties. (This would possibly make a large response which is possibly not needed by the client. To get a topic along with all of its properties use the "Get topic by ID":#get-topic-by-id request described above.) Which properties are returned depends on the installed plugins.

h2(#get-topics-by-type). Get topics by type

h3. Request

bc. 

h3. Response

bc. 

h2(#search-topics). Search topics

h3. Request

bc. 

h3. Response

bc. 

h2(#create-topic). Create topic

h3. Request

bc. 

h3. Response

bc. 

h2(#update-topic). Update topic

h3. Request

bc. 

h3. Response

bc. 

h2(#delete-topic). Delete topic

h3. Request

bc. 

h3. Response

bc. 

h1(#relations). Relations

h2(#get-relation-by-topics). Get relation by topics

h2(#create-relation). Create relation

h2(#update-relation). Update relation

h2(#delete-relation). Delete relation

h1(#topic-types). Topic Types

h2(#get-topic-type-ids). Get topic type IDs

h2(#get-topic-type-by-id). Get topic type by ID

h2(#create-topic-type). Create topic type

h2(#add-data-field). Add data field

h2(#update-data-field). Update data field

h2(#set-data-field-order). Set data field order

h2(#remove-data-field). Remove data field

h1(#topic-maps). Topic Maps

*Note:* The topicmap requests are available only, if the _DeepaMehta 3 Topicmaps_ plugin is installed (that is part of the DeepaMehta binary distribution). The topicmap requests are processed by this plugin. That's the reason why the request path doesn't start with @/core@, like the other requests described here.

h2(#get-topic-map-by-id). Get topic map by ID

h3. Request

bc. GET /topicmap/56

h3. Response

The response is the requested topic map:

bc. {
    "topics": [
        {
            "id": 67,
            "type_uri": "de/deepamehta/core/topictype/SearchResult",
            "label": "Richter",
            "properties": {
                "de/deepamehta/core/property/DateModified": 1278987883338
            },
            "visualization": {
              "x": 230.2720206072554, "y": 397.7343209804967,
              "visibility": true
            },
            "ref_id": 240
        },
        {
            "id": 42,
            "type_uri": "de/deepamehta/core/topictype/Note",
            "label": "Jörg Richter",
            "properties": {
                "de/deepamehta/core/property/DateModified": 1278736576165
            },
            "visualization": {
                "x": 436.61296997382306, "y": 314.2628641165793,
                "visibility": true
            },
            "ref_id": 243
        },
        {
            "id": 61,
            "type_uri": "de/deepamehta/core/topictype/Note",
            "label": "DeepaMehta 3",
            "properties": {
                "de/deepamehta/core/property/DateModified": 1278980093803
            },
            "visualization": {
                "x": 501.99434025678784, "y": 511.70696080848575,
                "visibility": true
            },
            "ref_id": 246
        }
    ],
    "relations":[
        {
            "id": 238,
            "type_id": "SEARCH_RESULT",
            "src_topic_id": 67, "dst_topic_id": 42,
            "properties": {},
            "ref_id": 68
        },
        {
            "id": 206,
            "type_id": "RELATION",
            "src_topic_id": 42, "dst_topic_id": 61,
            "properties": {},
            "ref_id": 69
        }
    ]
}

For details about the data format see [[Data Format]]#topic-map.

*Note:* The response doesn't contain all of the topic's and relation's properties. (This would possibly make a large response which is possibly not needed by the client. To get a topic along with all of its properties use the "Get topic by ID":#get-topic-by-id request described above.) Which properties are returned depends on the installed plugins.

h2(#add-topic-to-topic-map). Add topic to topic map

h3. Request

bc. PUT /topicmap/56

bc. {
    topic_id: 82,
    x: 384,
    y: 527
}

Adds topic 82 to topic map 56.

h3. Response

bc. {ref_id: 220}

The ref_id is needed when updating the topic on the topic map later on, e.g. when moving or hiding it.

h2(#add-relation-to-topic-map). Add relation to topic map

h3. Request

bc. PUT /topicmap/56

bc. {relation_id: 281}

Adds relation 281 to topic map 56.

h3. Response

bc. {ref_id: 72}

The ref_id is needed when updating the relation on the topic map later on, e.g. when removing it.

h2(#remove-topic-from-topic-map). Remove topic from topic map

h2(#remove-relation-from-topic-map). Remove relation from topic map

h1(#plugins). Plugins

h2(#get-installed-plugins). Get installed plugins
