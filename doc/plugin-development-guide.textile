DeepaMehta is built to be extendable through plugins.

* "What a plugin can do":#what-a-plugin-can-do
* "Setting up the development environment":#setting-up-the-development-environment
* "Starting a plugin project":#starting-a-plugin-project
* "Writing the plugin POM":#writing-the-plugin-pom
* "Building the plugin":#building-the-plugin
* "Deploying the plugin":#deploying-the-plugin
* "Running the plugin":#running-the-plugin
* "Updating the plugin":#updating-the-plugin
* "Distributing your plugin":#distributing-your-plugin
* "Installing 3rd party plugins":#installing-3rd-party-plugins
* "Footnotes":#footnotes


h1(#what-a-plugin-can-do). What a plugin can do

* Provide new topic types or extending extisting ones.
* Provide application logic.
** React upon server-side events.
** Provide REST resources.
* Extending the graphical client.
** React upon client-side events.
** Extend the REST client.

A DeepaMehta plugin is an OSGi bundle. The user can install a plugin by means of the OSGi console.

DeepaMehta provides a framework for the plugin developer which provides:

* Access to the DeepaMehta Core service.
* OSGi handling. 
* Migration management.


h1(#setting-up-the-development-environment). Setting up the development environment

1. Install Git and Maven.
2. Install the DeepaMehta binary distribution[1] as described here:

"http://github.com/jri/deepamehta3":http://github.com/jri/deepamehta3

3. Create a directory where your DeepaMehta development should take place and go there, e.g.:

bc. $ mkdir deepamehta3-dev
$ cd deepamehta3-dev

4. Clone the deepamehta3 project, and go there:

bc. $ git clone git://github.com/jri/deepamehta3.git
$ cd deepamehta3

"deepamehta3" is a Maven parent project. Besides documentation it contains nothing more than the parent POM (pom.xml). The parent POM declares dependencies and configurations that apply to all DeepaMehta sub-projects, e.g. the plugins you're developing.

bc. deepamehta3-dev/        # Your DeepaMehta development directory
  deepamehta3/          # The parent project
    README.md
    doc/
    pom.xml             # The DeepaMehta 3 parent POM


h1(#starting-a-plugin-project). Starting a plugin project

Create a directory for your plugin project *inside the DeepaMehta parent project* and go there. As an example we create a plugin project named "deepamehta3-topicmaps" here:

bc. $ mkdir deepamehta3-topicmaps               # Create the plugin project directory
$ cd deepamehta3-topicmaps

The structure within your plugin project directory is determined by a combination of both, Maven conventions and DeepaMehta conventions.

As an example lets look at the file layout of the actual "deepamehta3-topicmaps" plugin that is bundled with the DeepaMehta binary distribution[2] [3]:

bc. deepamehta3-dev/
  deepamehta3/
    pom.xml
    README.md
    deepamehta3-topicmaps/                  # Plugin project directory.
      pom.xml                               # The POM of your plugin project (mandatory). 
      README.md                             # 
      src/                                  # Server-side Java code goes into src/main/java.
        main/                               # Server-side Java code is optional.
          java/                             #
            de/                             # de/deepamehta/plugins/topicmaps is the root 
              deepamehta/                   # package of your Java classes. The package name
                plugins/                    # is under your choice.
                  topicmaps/
                    migrations/             # Migrations go into this directory and have a 
                      Migration1.java       # fixed name. Migrations are optional.
                    model/
                      Topicmap.java
                      ...
                    resources/              # REST resource classes go into this directory.
                      TopicmapResource.java # REST resource classes are optional.
                    TopicmapsPlugin.java    # The plugin's "main" class (optional).
          resources/                        # additional (non-Java) files (optional).
            plugin.properties               # Plugin configuration properties (optional).
            types.json                      # Declarative topic type definitions (optional).
            web/                            # Content is web-accessible (optional).
              images/                       # 
                network.png
              script/                       # Client-side JavaScipt goes here (optional).
                dm3_topicmaps.js            # Client-side "main" file starts with "dm3_".
              style/
                dm3-topicmaps.css

As you see, all possible plugin constituents are optional (besides the POM). Obviously an useful plugin will provide some (or all) constituents. Which one these are depends on the nature of your plugin.


h1(#writing-the-plugin-pom). Writing the plugin POM

A lot of configuration is done already by the parent POM. However, you must supply some settings individual to your plugin project. These comprise of:

* Human-readable Project name.
* Project identification in the Maven space (group ID, artifact ID, and version number).
* Instructions for the OSGi bundle packager.

Write a POM (pom.xml) and store it in your plugin project directory. Example:

bc.. <project>

  <modelVersion>4.0.0</modelVersion>              # Required by Maven. Copy it as is.

  <name>DeepaMehta 3 Topicmaps</name>             # Human-readable Project name.
  <groupId>de.deepamehta</groupId>                # Identify your project in the Maven space.
  <artifactId>deepamehta3-topicmaps</artifactId>  # Choose a reasonable group ID,
  <version>0.4-SNAPSHOT</version>                 # artifact ID, and version number.
  <packaging>bundle</packaging>                   # The packaging type must be "bundle".

  <parent>                                        # Relates to the parent POM.
    <groupId>de.deepamehta</groupId>              # Copy this declaration as is.
    <artifactId>deepamehta3-parent</artifactId>   # Just update the version number, if there
    <version>0.4-SNAPSHOT</version>               # is a newer DeepaMehta version meanwhile.
  </parent>

  <dependencies>                                  # Every DeepaMehta 3 plugin project
    <dependency>                                  # depends on the DeepaMehta 3 Core module.
      <groupId>de.deepamehta</groupId>            # Copy this declaration as is.
      <artifactId>deepamehta3-core</artifactId>   # Just update the version number, if there
      <version>0.4-SNAPSHOT</version>             # is a newer DeepaMehta version meanwhile.
    </dependency>
  </dependencies>

  <build>                                         # Instructs the OSGi bundle packager.
    <plugins>                                     # See below.
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <extensions>true</extensions>
        <configuration>
          <instructions>
            <Export-Package>
              de.deepamehta.plugins.topicmaps.migrations,
              de.deepamehta.plugins.topicmaps.resources
            </Export-Package>
            <Private-Package>
              de.deepamehta.plugins.topicmaps.*
            </Private-Package>
            <Bundle-Activator>
              de.deepamehta.plugins.topicmaps.TopicmapsPlugin
            </Bundle-Activator>
          </instructions>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>

p. If your plugin contains migrations or REST resource classes put the respective package name(s) in the @<Export-Package>@ element. If your plugin contains neither migrations nor REST resource classes the @<Export-Package>@ element is not needed.

Put all other package names (neither migrations nor resources) in the @<Private-Package>@ element. This is achieved best by the * notation. If your plugin contains no Java classes at all the @<Private-Package>@ element is not needed.

Put the fully qualified name of your plugin's "main" class in the @</Bundle-Activator>@ Element.<br />
*Important:* if your plugin has no "main" class you must specify @de.deepamehta.core.service.Plugin@ in the @</Bundle-Activator>@ Element.


h1(#building-the-plugin). Building the plugin

Inside the plugin project directory:

bc. $ mvn package

This builds the jar file, an OSGi bundle. The jar is placed in the directory @target@ (next to @src@).

bc. deepamehta3-topicmaps/                        # Plugin project directory.
  src/
  target/                                     # Contains artifacts build by Maven.
    deepamehta3-topicmaps-0.4-SNAPSHOT.jar    # The jar ready for deployment in OSGi console.


h1(#deploying-the-plugin). Deploying the plugin

1. Start DeepaMehta (if not running) as described here:

"http://github.com/jri/deepamehta3":http://github.com/jri/deepamehta3

2. In the OSGi text console[4]:

bc. g! start file:/home/terry/deepamehta3-dev/deepamehta3/deepamehta3-topicmaps/target/deepamehta3-topicmaps-0.4-SNAPSHOT.jar

The start commando installs and starts a bundle into the OSGi runtime. The bundle is specified as an absolute URL.

Note: You need to specifiy the URL only once. Once the plugin is installed, updating it is less verbose (see section below)


h1(#running-the-plugin). Running the plugin

In the DeepaMehta browser window: press reload and check if your plugin works as intended.


h1(#updating-the-plugin). Updating the plugin

1. Once you've done changes in plugin code or resource files: build the plugin again as decribed in the section above.

2. In the OSGi text console:

bc. g! update 42        # 42 is the bundle ID assigned to your plugin while it is first installed

To tell your plugin's bundle ID, use the OSGi text console's @lb@ command:

bc. g! lb               # lists all installed bundles along their IDs

Note: the bundle ID remains constant over the entire lifetime of your OSGi instance.


h1(#distributing-your-plugin). Distributing your plugin

Upload your plugin, namely the jar file, to a webserver and advertise the jar file's URL.


h1(#installing-3rd-party-plugins). Installing 3rd party plugins

Just like installing your local plugins, but using the public URL as advertised by the plugin vendor. Example:

bc. g! start http://www.example.com/deepamehta3-plugins/cool-deepamehta3-plugin.jar


h1(#footnotes). Footnotes

fn1. An alternative is to build DeepaMehta from sources, however this is not yet documented. Using the binary distribution is the most easy setup for developers as it provides a pre-configured OSGi runtime environment, including all (3rd party) bundle dependencies.

fn2. Despite the "deepamehta3-topicmaps" plugin is contained in the DeepaMehta binary distribution it is an self-contained plugin project just like your own plugin project.

fn3. If you want try out the build-lifecycle now, you could setup the actual "deepamehta3-topicmaps" plugin as an example: Go back to the DeepaMehta parent project (@$ cd ..@), then
@$ git clone git://github.com/jri/deepamehta3-topicmaps.git@
@$ cd deepamehta3-topicmaps@

fn4. If you've build the actual "deepamehta3-topicmaps" plugin you must uninstall the version bundled with the DeepaMehta binary distribution first. In the OSGi text console: @g! uninstall 26@ (26 is supposed to be the bundle ID of the "DeepaMehta 3 Topicmaps" bundle. Check out with @g! lb@ command).
